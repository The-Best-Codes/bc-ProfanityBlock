class ContentFilterBadWord {
  constructor() {
    // Base64 encoded bad words
    this.encodedCussWords = [
      "MmcxYw==",
      "MiBnaXJscyAxIGN1cA==",
      "YWNyb3RvbW9waGlsaWE=",
      "YWxhYmFtYSBob3QgcG9ja2V0",
      "YWxhc2thbiBwaXBlbGluZQ==",
      "YW5hbA==",
      "YW5pbGluZ3Vz",
      "YW51cw==",
      "YXBlc2hpdA==",
      "YXJzZWhvbGU=",
      "YXNz",
      "YXNzaG9sZQ==",
      "YXNzbXVuY2g=",
      "YXV0byBlcm90aWM=",
      "YXV0b2Vyb3RpYw==",
      "YmFiZWxhbmQ=",
      "YmFieSBiYXR0ZXI=",
      "YmFieSBqdWljZQ==",
      "YmFsbCBnYWc=",
      "YmFsbCBncmF2eQ==",
      "YmFsbCBraWNraW5n",
      "YmFsbCBsaWNraW5n",
      "YmFsbCBzYWNr",
      "YmFsbCBzdWNraW5n",
      "YmFuZ2Jyb3M=",
      "YmFuZ2J1cw==",
      "YmFyZWJhY2s=",
      "YmFyZWx5IGxlZ2Fs",
      "YmFyZW5ha2Vk",
      "YmFzdGFyZA==",
      "YmFzdGFyZG8=",
      "YmFzdGluYWRv",
      "YmJ3",
      "YmRzbQ==",
      "YmVhbmVy",
      "YmVhbmVycw==",
      "YmVhdmVyIGNsZWF2ZXI=",
      "YmVhdmVyIGxpcHM=",
      "YmVhc3RpYWxpdHk=",
      "YmVzdGlhbGl0eQ==",
      "YmlnIGJsYWNr",
      "YmlnIGJyZWFzdHM=",
      "YmlnIGtub2NrZXJz",
      "YmlnIHRpdHM=",
      "YmltYm9z",
      "YmlyZGxvY2s=",
      "Yml0Y2g=",
      "Yml0Y2hlcw==",
      "YmxhY2sgY29jaw==",
      "YmxvbmRlIGFjdGlvbg==",
      "YmxvbmRlIG9uIGJsb25kZSBhY3Rpb24=",
      "Ymxvd2pvYg==",
      "YmxvdyBqb2I=",
      "YmxvdyB5b3VyIGxvYWQ=",
      "Ymx1ZSB3YWZmbGU=",
      "Ymx1bXBraW4=",
      "Ym9sbG9ja3M=",
      "Ym9uZGFnZQ==",
      "Ym9uZXI=",
      "Ym9vYg==",
      "Ym9vYnM=",
      "Ym9vdHkgY2FsbA==",
      "YnJvd24gc2hvd2Vycw==",
      "YnJ1bmV0dGUgYWN0aW9u",
      "YnVra2FrZQ==",
      "YnVsbGR5a2U=",
      "YnVsbGV0IHZpYmU=",
      "YnVsbHNoaXQ=",
      "YnVuZyBob2xl",
      "YnVuZ2hvbGU=",
      "YnVzdHk=",
      "YnV0dA==",
      "YnV0dGNoZWVrcw==",
      "YnV0dGhvbGU=",
      "Y2FtZWwgdG9l",
      "Y2FtZ2lybA==",
      "Y2Ftc2x1dA==",
      "Y2Ftd2hvcmU=",
      "Y2FycGV0IG11bmNoZXI=",
      "Y2FycGV0bXVuY2hlcg==",
      "Y2hvY29sYXRlIHJvc2VidWRz",
      "Y2lhbGlz",
      "Y2lyY2xlamVyaw==",
      "Y2xldmVsYW5kIHN0ZWFtZXI=",
      "Y2xpdA==",
      "Y2xpdG9yaXM=",
      "Y2xvdmVyIGNsYW1wcw==",
      "Y2x1c3RlcmZ1Y2s=",
      "Y29jaw==",
      "Y29ja3M=",
      "Y29wcm9sYWduaWE=",
      "Y29wcm9waGlsaWE=",
      "Y29ybmhvbGU=",
      "Y29vbg==",
      "Y29vbnM=",
      "Y3JlYW1waWU=",
      "Y3Vt",
      "Y3VtbWluZw==",
      "Y3Vtc2hvdA==",
      "Y3Vtc2hvdHM=",
      "Y3VubmlsaW5ndXM=",
      "Y3VudA==",
      "ZGFya2ll",
      "ZGF0ZSByYXBl",
      "ZGF0ZXJhcGU=",
      "ZGVlcCB0aHJvYXQ=",
      "ZGVlcHRocm9hdA==",
      "ZGVuZHJvcGhpbGlh",
      "ZGljaw==",
      "ZGlsZG8=",
      "ZGluZ2xlYmVycnk=",
      "ZGluZ2xlYmVycmllcw==",
      "ZGlydHkgcGlsbG93cw==",
      "ZGlydHkgc2FuY2hleg==",
      "ZG9nZ2llIHN0eWxl",
      "ZG9nZ2llc3R5bGU=",
      "ZG9nZ3kgc3R5bGU=",
      "ZG9nZ3lzdHlsZQ==",
      "ZG9nIHN0eWxl",
      "ZG9sY2V0dA==",
      "ZG9taW5hdGlvbg==",
      "ZG9taW5hdHJpeA==",
      "ZG9tbWVz",
      "ZG9ua2V5IHB1bmNo",
      "ZG91YmxlIGRvbmc=",
      "ZG91YmxlIHBlbmV0cmF0aW9u",
      "ZHAgYWN0aW9u",
      "ZHJ5IGh1bXA=",
      "ZHZkYQ==",
      "ZWF0IG15IGFzcw==",
      "ZWNjaGk=",
      "ZWphY3VsYXRpb24=",
      "ZXJvdGlj",
      "ZXJvdGlzbQ==",
      "ZXNjb3J0",
      "ZXVudWNo",
      "ZmFn",
      "ZmFnZ290",
      "ZmVjYWw=",
      "ZmVsY2g=",
      "ZmVsbGF0aW8=",
      "ZmVsdGNo",
      "ZmVtYWxlIHNxdWlydGluZw==",
      "ZmVtZG9t",
      "ZmlnZ2luZw==",
      "ZmluZ2VyYmFuZw==",
      "ZmluZ2VyaW5n",
      "ZmlzdGluZw==",
      "Zm9vdCBmZXRpc2g=",
      "Zm9vdGpvYg==",
      "ZnJvdHRpbmc=",
      "ZnVjaw==",
      "ZnVjayBidXR0b25z",
      "ZnVja2lu",
      "ZnVja2luZw==",
      "ZnVja3RhcmRz",
      "ZnVkZ2UgcGFja2Vy",
      "ZnVkZ2VwYWNrZXI=",
      "ZnV0YW5hcmk=",
      "Z2FuZ2Jhbmc=",
      "Z2FuZyBiYW5n",
      "Z2F5IHNleA==",
      "Z2VuaXRhbHM=",
      "Z2lhbnQgY29jaw==",
      "Z2lybCBvbg==",
      "Z2lybCBvbiB0b3A=",
      "Z2lybHMgZ29uZSB3aWxk",
      "Z29hdGN4",
      "Z29hdHNl",
      "Z29kIGRhbW4=",
      "Z29ra3Vu",
      "Z29sZGVuIHNob3dlcg==",
      "Z29vZHBvb3A=",
      "Z29vIGdpcmw=",
      "Z29yZWdhc20=",
      "Z3JvcGU=",
      "Z3JvdXAgc2V4",
      "Zy1zcG90",
      "Z3Vybw==",
      "aGFuZCBqb2I=",
      "aGFuZGpvYg==",
      "aGFyZCBjb3Jl",
      "aGFyZGNvcmU=",
      "aGVudGFp",
      "aG9tb2Vyb3RpYw==",
      "aG9ua2V5",
      "aG9va2Vy",
      "aG9ybnk=",
      "aG90IGNhcmw=",
      "aG90IGNoaWNr",
      "aG93IHRvIGtpbGw=",
      "aG93IHRvIG11cmRlcg==",
      "aHVnZSBmYXQ=",
      "aHVtcGluZw==",
      "aW5jZXN0",
      "aW50ZXJjb3Vyc2U=",
      "amFjayBvZmY=",
      "amFpbCBiYWl0",
      "amFpbGJhaXQ=",
      "amVsbHkgZG9udXQ=",
      "amVyayBvZmY=",
      "amlnYWJvbw==",
      "amlnZ2Fib28=",
      "amlnZ2VyYm9v",
      "aml6eg==",
      "anVnZ3M=",
      "a2lrZQ==",
      "a2luYmFrdQ==",
      "a2lua3N0ZXI=",
      "a2lua3k=",
      "a25vYmJpbmc=",
      "bGVhdGhlciByZXN0cmFpbnQ=",
      "bGVhdGhlciBzdHJhaWdodCBqYWNrZXQ=",
      "bGVtb24gcGFydHk=",
      "bGl2ZXNleA==",
      "bG9saXRh",
      "bG92ZW1ha2luZw==",
      "bWFrZSBtZSBjb21l",
      "bWFsZSBzcXVpcnRpbmc=",
      "bWFzdHVyYmF0ZQ==",
      "bWFzdHVyYmF0aW5n",
      "bWFzdHVyYmF0aW9u",
      "bWVuYWdlIGEgdHJvaXM=",
      "bWlsZg==",
      "bWlzc2lvbmFyeSBwb3NpdGlvbg==",
      "bW9uZw==",
      "bW90aGVyZnVja2Vy",
      "bW91bmQgb2YgdmVudXM=",
      "bXIgaGFuZHM=",
      "bXVmZiBkaXZlcg==",
      "bXVmZmRpdmluZw==",
      "bmFtYmxh",
      "bmF3YXNoaQ==",
      "bmVncm8=",
      "bmVvbmF6aQ==",
      "bmlnZ2E=",
      "bmlnZ2Vy",
      "bmlnIG5vZw==",
      "bmltcGhvbWFuaWE=",
      "bmlwcGxl",
      "bmlwcGxlcw==",
      "bnNmdw==",
      "bnNmdyBpbWFnZXM=",
      "bnVkZQ==",
      "bnVkaXR5",
      "bnV0dGVu",
      "bnltcGhv",
      "bnltcGhvbWFuaWE=",
      "b2N0b3B1c3N5",
      "b21vcmFzaGk=",
      "b25lIGN1cCB0d28gZ2lybHM=",
      "b25lIGd1eSBvbmUgamFy",
      "b3JnYXNt",
      "b3JneQ==",
      "cGFlZG9waGlsZQ==",
      "cGFraQ==",
      "cGFudGllcw==",
      "cGFudHk=",
      "cGVkb2JlYXI=",
      "cGVkb3BoaWxl",
      "cGVnZ2luZw==",
      "cGVuaXM=",
      "cGhvbmUgc2V4",
      "cGllY2Ugb2Ygc2hpdA==",
      "cGlrZXk=",
      "cGlzc2luZw==",
      "cGlzcyBwaWc=",
      "cGlzc3BpZw==",
      "cGxheWJveQ==",
      "cGxlYXN1cmUgY2hlc3Q=",
      "cG9sZSBzbW9rZXI=",
      "cG9ueXBsYXk=",
      "cG9vZg==",
      "cG9vbg==",
      "cG9vbnRhbmc=",
      "cHVuYW55",
      "cG9vcCBjaHV0ZQ==",
      "cG9vcGNodXRl",
      "cG9ybg==",
      "cG9ybm8=",
      "cG9ybm9ncmFwaHk=",
      "cHJpbmNlIGFsYmVydCBwaWVyY2luZw==",
      "cHRoYw==",
      "cHViZXM=",
      "cHVzc3k=",
      "cXVlYWY=",
      "cXVlZWY=",
      "cXVpbQ==",
      "cmFnaGVhZA==",
      "cmFnaW5nIGJvbmVy",
      "cmFwZQ==",
      "cmFwaW5n",
      "cmFwaXN0",
      "cmVjdHVt",
      "cmV2ZXJzZSBjb3dnaXJs",
      "cmltam9i",
      "cmltbWluZw==",
      "cm9zeSBwYWxt",
      "cm9zeSBwYWxtIGFuZCBoZXIgNSBzaXN0ZXJz",
      "cnVzdHkgdHJvbWJvbmU=",
      "c2FkaXNt",
      "c2FudG9ydW0=",
      "c2NhdA==",
      "c2NobG9uZw==",
      "c2Npc3NvcmluZw==",
      "c2VtZW4=",
      "c2V4",
      "c2V4Y2Ft",
      "c2V4bw==",
      "c2V4eQ==",
      "c2V4dWFs",
      "c2V4dWFsbHk=",
      "c2V4dWFsaXR5",
      "c2hhdmVkIGJlYXZlcg==",
      "c2hhdmVkIHB1c3N5",
      "c2hlbWFsZQ==",
      "c2hpYmFyaQ==",
      "c2hpdA==",
      "c2hpdGJsaW1w",
      "c2hpdHR5",
      "c2hvdGE=",
      "c2hyaW1waW5n",
      "c2tlZXQ=",
      "c2xhbnRleWU=",
      "c2x1dA==",
      "cyZt",
      "c211dA==",
      "c25hdGNo",
      "c25vd2JhbGxpbmc=",
      "c29kb21pemU=",
      "c29kb215",
      "c3Bhc3RpYw==",
      "c3BpYw==",
      "c3Bsb29nZQ==",
      "c3Bsb29nZSBtb29zZQ==",
      "c3Bvb2dl",
      "c3ByZWFkIGxlZ3M=",
      "c3B1bms=",
      "c3RyYXAgb24=",
      "c3RyYXBvbg==",
      "c3RyYXBwYWRv",
      "c3RyaXAgY2x1Yg==",
      "c3R5bGUgZG9nZ3k=",
      "c3Vjaw==",
      "c3Vja3M=",
      "c3VpY2lkZSBnaXJscw==",
      "c3VsdHJ5IHdvbWVu",
      "c3dhc3Rpa2E=",
      "c3dpbmdlcg==",
      "dGFpbnRlZCBsb3Zl",
      "dGFzdGUgbXk=",
      "dGVhIGJhZ2dpbmc=",
      "dGhyZWVzb21l",
      "dGhyb2F0aW5n",
      "dGh1bWJ6aWxsYQ==",
      "dGllZCB1cA==",
      "dGlnaHQgd2hpdGU=",
      "dGl0",
      "dGl0cw==",
      "dGl0dGllcw==",
      "dGl0dHk=",
      "dG9uZ3VlIGluIGE=",
      "dG9wbGVzcw==",
      "dG9zc2Vy",
      "dG93ZWxoZWFk",
      "dHJhbm55",
      "dHJpYmFkaXNt",
      "dHViIGdpcmw=",
      "dHViZ2lybA==",
      "dHVzaHk=",
      "dHdhdA==",
      "dHdpbms=",
      "dHdpbmtpZQ==",
      "dHdvIGdpcmxzIG9uZSBjdXA=",
      "dW5kcmVzc2luZw==",
      "dXBza2lydA==",
      "dXJldGhyYSBwbGF5",
      "dXJvcGhpbGlh",
      "dmFnaW5h",
      "dmVudXMgbW91bmQ=",
      "dmlhZ3Jh",
      "dmlicmF0b3I=",
      "dmlvbGV0IHdhbmQ=",
      "dm9yYXJlcGhpbGlh",
      "dm95ZXVy",
      "dm95ZXVyd2Vi",
      "dm95dWVy",
      "dnVsdmE=",
      "d2Fuaw==",
      "d2V0YmFjaw==",
      "d2V0IGRyZWFt",
      "d2hpdGUgcG93ZXI=",
      "d2hvcmU=",
      "d29ybGRzZXg=",
      "d3JhcHBpbmcgbWVu",
      "d3JpbmtsZWQgc3RhcmZpc2g=",
      "eHg=",
      "eHh4",
      "eWFvaQ==",
      "eWVsbG93IHNob3dlcnM=",
      "eWlmZnk=",
      "em9vcGhpbGlh",
      "8J+WlQ==",
      "Z2F5",
      "aG9tbw==",
    ];

    this.evasionPatterns = [
      { pattern: /4/gi, replacement: "a" },
      { pattern: /\$/gi, replacement: "s" },
      { pattern: /5/gi, replacement: "s" },
      { pattern: /0/gi, replacement: "o" },
      { pattern: /1/gi, replacement: "i" },
      { pattern: /!/gi, replacement: "i" },
      { pattern: /@/gi, replacement: "a" },
    ];
  }

  decodeBase64(encodedString) {
    return atob(encodedString);
  }

  normalizeText(text) {
    // Apply evasion patterns to normalize text
    this.evasionPatterns.forEach(({ pattern, replacement }) => {
      text = text.replace(pattern, replacement);
    });
    return text;
  }

  containsBadWords(
    text,
    matchWord = false,
    detectEvasionCharacters = true,
    detectEvasionSeperators = true
  ) {
    // Decode bad words for comparison
    const cussWords = this.encodedCussWords.map((encodedWord) =>
      this.decodeBase64(encodedWord)
    );

    // Normalize text to catch evasion attempts
    let normalizedText = text;
    if (detectEvasionCharacters) {
      // Apply evasion patterns to normalize text
      this.evasionPatterns.forEach(({ pattern, replacement }) => {
        normalizedText = normalizedText.replace(pattern, replacement);
      });
    }

    if (detectEvasionSeperators) {
      // Remove common separators between letters
      normalizedText = normalizedText.replace(/[-_.]/g, "");
      // Remove spaces between letters only for bad words
      cussWords.forEach((cussWord) => {
        // Create a dynamic regular expression that matches the bad word with any spaces between the letters
        let wordRegex = new RegExp(cussWord.split("").join("\\s*"), "gi");
        // Replace the matched substring with the bad word without spaces
        normalizedText = normalizedText.replace(wordRegex, (match) => {
          return match.replace(/\s/g, "");
        });
      });
    }

    console.log(normalizedText);

    // Check if any bad words are present in the text as substrings
    return cussWords.some((cussWord) => {
      // Create a regular expression based on the options
      let wordRegex;
      if (matchWord) {
        // Match only whole words
        wordRegex = new RegExp(`\\b${cussWord}\\b`, "gi");
      } else {
        // Match any substring
        wordRegex = new RegExp(cussWord, "gi");
      }
      return wordRegex.test(normalizedText);
    });
  }

  cleanText(
    text,
    method = "replace",
    detectEvasionCharacters = true,
    detectEvasionSeparators = true
  ) {
    let cleanedText = text;

    if (detectEvasionCharacters) {
      cleanedText = this.normalizeText(cleanedText);
    }

    if (detectEvasionSeparators) {
      cleanedText = cleanedText.replace(/[-_.]/g, "");
      this.encodedCussWords.forEach((encodedWord) => {
        const cussWord = this.decodeBase64(encodedWord);

        let wordRegex;
        wordRegex = new RegExp(cussWord, "gi");

        if (method === "replace") {
          cleanedText = cleanedText.replace(wordRegex, (match) => {
            return match.replace(/\S/g, "*");
          });
        } else if (method === "remove") {
          cleanedText = cleanedText.replace(wordRegex, "");
        }
      });
    }

    return cleanedText;
  }
}
